name: Deploy to AWS

on:
  push:
    branches:
      - main
  workflow_dispatch: # Permite que o workflow seja acionado manualmente

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 0.14.9
          terraform_wrapper: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init and Apply
        id: terraform_apply
        run: |
          cd terraform
          terraform init -upgrade
          terraform apply -auto-approve\
            -var="aws_region=${{ secrets.AWS_REGION }}" \
            -var="database_name=${{ secrets.DATABASE_NAME }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="db_username=${{ secrets.DB_USERNAME }}"
          echo "DB_INSTANCE_ENDPOINT=$(terraform output -raw db_instance_endpoint)"
        
      - name: Debug DB_INSTANCE_ENDPOINT
        run: echo "DB = ${{ env.DB_INSTANCE_ENDPOINT }}"
        env:
          DB_INSTANCE_ENDPOINT: ${{ steps.terraform_apply.outputs.db_instance_endpoint }}
        
      - name: Execute SQL Script on RDS
        run: |
          PGPASSWORD="${{ secrets.DB_PASSWORD }}" psql -h ${{ steps.terraform_apply.outputs.db_instance_endpoint }} -U ${{ secrets.DB_USERNAME }} -d ${{ secrets.DATABASE_NAME }} -a -f ./db/init-sql-script.sql
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          DB_INSTANCE_ENDPOINT: ${{ steps.terraform_apply.outputs.db_instance_endpoint }}
      
      - name: Configure AWS EKS kubectl
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name $(terraform output -raw cluster_name)
      
      - name: List EKS Nodes
        run: |
          kubectl get nodes

      - name: Configure Kubernetes Secrets
        run: |
          kubectl create secret generic postgres-secret \
            --from-literal=username=$(terraform output -raw db_username) \
            --from-literal=password=$(terraform output -raw db_password) \
            --from-literal=database=$(terraform output -raw database_name) \
            --from-literal=host=$(terraform output -raw db_instance_endpoint) \
            --dry-run=client -o yaml | kubectl apply -f -
        working-directory: terraform

      - name: Deploy Kubernetes Configuration
        run: |
          kubectl apply -f kubernetes/api/1-api-deployment.yml
          kubectl apply -f kubernetes/api/2-api-service.yml
          kubectl apply -f kubernetes/api/3-api-hpa.yml
          kubectl apply -f kubernetes/apppagamento/1-api-pagamento-deployment.yml
          kubectl apply -f kubernetes/apppagamento/2-api-pagamento-service.yml
          kubectl apply -f kubernetes/apppagamento/3-api-pagamento-hpa.yml

      - name: Get API Service Public Address
        run: |
          echo "API_PUBLIC_ADDRESS=$(kubectl get svc api-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')" >> $GITHUB_ENV

      - name: Use API Public Address
        run: |
          echo "Accessing API at http://${{ env.API_PUBLIC_ADDRESS }}"          
